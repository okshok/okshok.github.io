{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/java-util-package","result":{"data":{"markdownRemark":{"id":"7d960b15-f982-5cf9-ba44-0fc0ed70621c","html":"<p>자바의 java.time 패키지에 대해 알아보자. 구체적으로 날짜를 위한 TemporalAccessor 클래스와 zoneId 클래스에 대해 알아보겠다.</p>\n<p>미국인이랑 통화하는데 미국인이 물어본다. 지금 몇시야? 나는 눈 앞의 벽시계를 바라보며 아침 8:30분이라 알려준다. 미국인은 갸우뚱하며 되묻는다. 그럴리가 없는데? 이 상황에서 나는 TimeZone을 고려하지 않은 localTime을 말해줬다. 미국시간대와 한국시간대가 다른 걸 인지한 나, 한국표준시는 UTC+9고 워싱턴 기준으로는 UTC-4, 그럼 13시간을 빼서 알려주면 되겠네. 다시 미국인에게 알려준다. ‘미국시간 기준으로 저녁 7:30분야’ , 미국인은 다시 얘기한다. ‘헤이 승한, DST가 고려 안된 거 같은데?’ 맞다 DST(daylight saving time), 써머타임을 적용 안했구나. 그럼 써머타임을 적용해보자. 08:30 - 13시간 - 30분 = 그럼 07:00이 되네. 아 복잡하다. </p>\n<p>근데 이런 복잡한 것들을 자바에서는 어떻게 처리하지? 이것들에 대해 차근차근 알아보자.</p>\n<h1 id=\"타임존\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%84%EC%A1%B4\" aria-label=\"타임존 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타임존</h1>\n<h2 id=\"zoneid\" style=\"position:relative;\"><a href=\"#zoneid\" aria-label=\"zoneid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ZoneId</h2>\n<p>자바 8 이상부터는 타임존  관리를 위해 ZoneId 클래스를 사용한다. API에는 다음과 같은 설명이 있다.</p>\n<ul>\n<li>LocalDateTime 과 Instant 간의 변환을 위해서 ZoneId 클래스가 존재한다.</li>\n<li>\n<p>zoneId는 크게 두 가지 유형으로 나뉜다.</p>\n<ul>\n<li>UTC 로부터 얼마나 차이가 나는가에 대한 정보, 즉 UTC XX  값</li>\n<li>지역정보, 정치적 역사적 정보를 갖고 있다는 의미.</li>\n</ul>\n</li>\n</ul>\n<p>ZoneId 클래스는 지역 정보 또는 오프셋 정보를 가질 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">//  오프셋정보만 가지고 있음\nZoneId offsetZone <span class=\"token operator\">=</span> ZoneId.of<span class=\"token punctuation\">(</span><span class=\"token string\">\"+09:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //offsetZone instanceof  <span class=\"token operator\">>></span>  ZoneOffset.class\nZoneOffset.ofHours<span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n// 지역정보를 기반으로 zoneRule 정보를 갖고 있음\n//regionZone instanceof  <span class=\"token operator\">>></span>  ZoneRegion.class\nZoneId regionZone <span class=\"token operator\">=</span> ZoneId.of<span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Seoul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위처럼 ZoneId의 static 메소드를 통해 zone 관련 클래스를 생성할 수 있다. 메소드의 param 정보에 따라 반환객체가 달라진다. 지역정보가 담기면 ZoneRegion 클래스로, 단순 시차 정보만 갖고 있으면 ZoneOffset 객체를 반환한다. 두 객체 모두 ZoneId의 sub 클래스다.</p>\n<p>날짜 클래스들에서 타임존이 필요할 때 ZoneId을 사용하게 된다. </p>\n<h2 id=\"zonerules\" style=\"position:relative;\"><a href=\"#zonerules\" aria-label=\"zonerules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ZoneRules</h2>\n<ul>\n<li>동일 시간대에서 시간편차가 얼마나 변하는 지에 대한 정보를 갖고 있는 객체\n과거 그리고 미래에 대한 시간 편차 정보를 갖고 있다.</li>\n</ul>\n<p>zondId의 하위 객체인 zoneRegion은 지역 정보를 가지고 있음을 앞서 설명했다. ZoneId 에서 아래 메소드로 지역정보가 담긴 ZoneRules 를 가져올수있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ZoneRules</span> <span class=\"token function\">getRules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 객체를 통해서 LocalDateTime의 현재 오프셋 또는 과거 오프셋 정보를 구할 수 있다. 짚고 넘어갈점은 이 객체는 ZoneId를 갖고 있지 않다. 즉 ZoneId를 통해서( 객체가 단순 offset기 아닌 regional 정보를 갖고 있는 경우, ZoneId 객체 참조) ZoneRules를 가져올 수는 있지만 ZoneRules에서 ZoneId를 추론할 수는 없다는 뜻이다.  </p>\n<h1 id=\"날짜-객체\" style=\"position:relative;\"><a href=\"#%EB%82%A0%EC%A7%9C-%EA%B0%9D%EC%B2%B4\" aria-label=\"날짜 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>날짜 객체</h1>\n<p>java8은 시간을 가진 객체, 날짜만 가진 객체, 그리고 타임존을 가진 객체 등, 각 성격에 따라 엄격하게 구분하여 사용하고 있다. 그래서 날짜와 시간을 모두 가진  LocalDateTime 객체 생성시 시간 정보가 없으면 에러가 발생한다. 00시00분으로 해줘도 좋을 것 같다고 생각하지만, 용도를 명확히 하기 위해 그런 것 같다.</p>\n<h2 id=\"instant\" style=\"position:relative;\"><a href=\"#instant\" aria-label=\"instant permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Instant</h2>\n<p>영어로는  <strong>‘single instantaneous point on the time-line’</strong>로 설명되어 있다. 즉 순간적인 시점을 의미하며, 여기서 말하는 타임라인은 1970년 1월 1일 UTC+0 (1970-01-01T00:00:00Z) 기준이다. <del>영국은 좋겠다.</del>  </p>\n<p>객체는 매우 단순하다. 시간 정보를 저장하기 위해 연월일시분초 데이터를 long 타입으로 저장하고 그 이하의 밀리세컨드 정보를 int 타입으로 저장한다. 이렇게 분리해서 저장하는 이유는 long으로 밀리세컨드까지 포함하여 저장할 수 없기 때문이라고 설명한다.</p>\n<p>이 객체를 통해서 뒤에서 설명할 객체들을 모두 생성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Instant</span> <span class=\"token punctuation\">{</span> \n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> seconds<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1970-01-01T00:00:00Z.</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> nanos<span class=\"token punctuation\">;</span> <span class=\"token comment\">// never exceeds 999,999,999.</span></code></pre></div>\n<p>아래 내용을 보면 인스턴트가 long보다 더 정확한 값을 가질 수 있음을 볼 수 있다. (저장할 수 있는 값의 길이가 길다..)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Instant</span> instant <span class=\"token operator\">=</span> <span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofEpochMilli</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 1600816316656</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instant<span class=\"token punctuation\">.</span><span class=\"token function\">getEpochSecond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">getNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1600816316 655000000</span></code></pre></div>\n<h2 id=\"localdate-localtime-localdatetime\" style=\"position:relative;\"><a href=\"#localdate-localtime-localdatetime\" aria-label=\"localdate localtime localdatetime permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LocalDate, LocalTime, LocalDateTime</h2>\n<p>이 객체들은 timezone이 없이 시간, 날짜 또는 시간날짜를 동시에 가지는 객체들이다. 이름을 통해서 각 객체들의 차이점은 명확히 드러난다. 코드로 간단히 훑여보자</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// virtual machine의 타임존을 기준으로 생성</span>\n<span class=\"token class-name\">LocalDate</span> localDate <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2020-09-23</span>\n<span class=\"token class-name\">LocalTime</span> localTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 21:25:08.721</span>\n<span class=\"token class-name\">LocalDateTime</span> localDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2020-09-23T21:25:08.722</span>\n\n<span class=\"token comment\">// 인스턴스 객체와 특정 타임존을 기준으로 객체 생성 방법</span>\n<span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofInstant</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneOffset</span><span class=\"token punctuation\">.</span>UTC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>복잡할 건 없다. 다만 생각해봐야 할 것은 위 객체들은 모두 로컬타임이다. 거실에 있는 벽시계를 보자, 어떤 시간을 가르키고 있지만 그게 미국시간인지, 한국시간인지 알 길이 없다. 책상에 있는 달력도 마찬가지다. 즉 이 객체들은 시간/날짜 정보를 가지고 있지만 타임존 정보가 없다.  </p>\n<p>아래 코드에서 <code class=\"language-text\">Instant.from(로컬 객체들)</code> 은 에러가 발생한다. 타임존이 없기 때문이다.  Instant 객체는 UTC+0 이라는 표준시로서의 타임존이 존재한다고 봐야 한다. 이 객체로 변환하는데 한국시간을 넣고 변환해달라고 하는 것은 이치에 맞지 않다. 뒤에서 얘기할 타임존을 가지고 있는  <code class=\"language-text\">ZoneDateTime</code> 을 인자로 사용시 에러가 발생하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Exception, Unsupported field: InstantSeconds</span>\n<span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZonedDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정상 작동</span></code></pre></div>\n<p>주의\nDateTime 객체를 만들 때 시간정보 없이 날짜 정보만 갖고는 만들 수 없다. 전에 널리 쓰이던 Joda의 <code class=\"language-text\">DateTime</code>은 날짜만 넣어도 에러가 발생하지 않았기에 적어둔다.</p>\n<h2 id=\"zoneddatetime-offsetdatetime-offsettime\" style=\"position:relative;\"><a href=\"#zoneddatetime-offsetdatetime-offsettime\" aria-label=\"zoneddatetime offsetdatetime offsettime permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ZonedDateTime, OffsetDateTime, OffsetTime</h2>\n<p>이제 소개할 객체들은 타임존을 갖고 있다. 객체명에서 보이는 것처럼 zone, offset 로 다른 접미사를 갖고 있다.  앞서 ZoneId 객체에서 설명했던 <code class=\"language-text\">offsetZone</code> 또는 <code class=\"language-text\">regionalZone</code> 의 차이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LocalDateTime</span> localDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2020-09-23T21:25:08.722</span>\n\n<span class=\"token comment\">/* zoneDateTime */</span>\n<span class=\"token class-name\">ZonedDateTime</span> zonedDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">ZonedDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">systemDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ZonedDateTime</span> zonedDateTimeDhaka <span class=\"token operator\">=</span> zonedDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">withZoneSameInstant</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Dhaka\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//timeZone 변경</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>zonedDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2020-09-27T20:57:41.249159100+09:00[Asia/Seoul]</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>zonedDateTimeDhaka<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2020-09-27T17:57:41.249159100+06:00[Asia/Dhaka]</span>\n<span class=\"token class-name\">LocalDateTime</span> localDateTimeSeoul <span class=\"token operator\">=</span> zonedDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">toLocalDateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//zoneDatetime > localDateTime </span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>localDateTimeSeoul<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2020-09-27T20:59:49.815075100</span>\n<span class=\"token class-name\">ZonedDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>localDateTimeSeoul<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">systemDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// localDateTime > zoneDatetime</span>\n<span class=\"token comment\">/* OffsetDateTime */</span>\n<span class=\"token class-name\">OffsetDateTime</span> offsetDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">OffsetDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZoneOffset</span><span class=\"token punctuation\">.</span>UTC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">OffsetDateTime</span> offsetDateTimePlus9 <span class=\"token operator\">=</span> offsetDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">withOffsetSameInstant</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZoneOffset</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//offset 변경</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>offsetDateTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2020-09-27T20:57:41.249159100Z</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>offsetDateTimePlus9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2020-09-28T05:57:41.249159100+09:00</span></code></pre></div>\n<h1 id=\"datetimeformatter\" style=\"position:relative;\"><a href=\"#datetimeformatter\" aria-label=\"datetimeformatter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DateTimeFormatter</h1>\n<p>앞선 날짜 객체들을 사용자가 원하는 양식으로 표기하기 위해 <code class=\"language-text\">DateTimeFormatter</code> 객체를 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LocalDateTime</span> ldt <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">DateTimeFormatter</span> formatter <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyyMMdd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// formatter</span>\n<span class=\"token comment\">//1 LocalDateTime > String</span>\n<span class=\"token class-name\">String</span> date <span class=\"token operator\">=</span> formatter<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>ldt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"20200927 21:23:33\"</span>\n<span class=\"token comment\">//2 -1  String > TemporalAccessor >  LocalDateTime</span>\n<span class=\"token class-name\">TemporalAccessor</span> temporalAccessor <span class=\"token operator\">=</span> formatter<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">LocalDateTime</span> localDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>temporalAccessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//2 -2 String > LocalDateTime</span>\n<span class=\"token class-name\">LocalDateTime</span> localDateTime2 <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> formatter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>예시를 보면 복잡할 게 전혀없다. 다만 패턴에서 요구하는 데이터가 없으면 에러가 발생한다. 예를 들어 Formatter가 시간정보인 ‘HH, mm’ 를 요구하는데 localDate 객체를 가지고 포맷을 시도하면 에러가 발생</p>","fields":{"slug":"/posts/java-util-package","tagSlugs":["/tag/java-time-package/"]},"frontmatter":{"date":"2020-09-12","description":"날짜는 알고 살자","tags":["java time package"],"title":"java time 패키지 분석 - 기본편","socialImage":"..\\..\\static\\media\\image-2.jpg"}}},"pageContext":{"slug":"/posts/java-util-package"}},"staticQueryHashes":["251939775","401334301","825871152"]}